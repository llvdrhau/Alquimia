
'''
fixing the reactions where a lot of carbon, oxygen, hydrogen goes missing look at the Excel files generated by
the function print_model_2_excel (see script check_element_balance.py)
to see which reactions are leaking certain elements
'''

from f_screen_SBML import *
from cobra.io import write_sbml_model

# switch to save the model
save = True

# model specifications
modelName = "P_sherm_model.xml"
loc_sher = get_location(modelName)
model = cobra.io.read_sbml_model(loc_sher)
model.name = "P_sherm"

# bioMass metabolite does not have a name
metbiomassId = 'S_biomass_ext'
metbiomass = model.metabolites.get_by_id(metbiomassId)
metbiomass.name = 'Biomass'

# fix iron metabolites 2Fe2S and 4Fe4S
FeDict = {'S_cpdnew23_c0': 'Fe2S2', # 2Fe2S
        'S_cpdnew24_c0': 'Fe4S2'} # 4Fe4S

for metId in FeDict:
    metFe = model.metabolites.get_by_id(metId)
    metFe.formula = FeDict[metId]

# let's look at the reaction which cause a significant loss of carbon are they fixed?  (see the analysis Excel files)
rxnId = [
    "rxnnew73_c0", # reaction to make protein
    "rxnnew74_c0"  # reaction to make RNA
]

for id in rxnId:
     check_reaction(model= model, reactionID= id)

# having looked at the reactions which lose a lot of carbon, lets fix the formulas of the metabolites so that massbalances comply
# the stoichometry of all the interested metabolites are one, so just add the missing elements to the formula
metFormulas = {
     'S_cpd11463_c0': 'C4H5N2O3C33.17H31.847O18.512',  # protein , C4H5N2O3R2 , replace the R
     'S_cpd11613_c0': 'C15H23O19P3C16.66H11.46O2.876',  # RNA, C15H23O19P3R3 , replace the R
}
# let's give the correct formula to each metabolite
for id in metFormulas:
     met = model.metabolites.get_by_id(id)
     met.formula = metFormulas[id]


''' 
let's estimate the formulas of metabolites (that are missing a formula) with a reaction of your choosing (see Excel analysis)
'''
fixDict1 = {
     'S_cpdnew22_c0': 'rxnnew66_c0',     # Propionibacterium peptidoglycan
     'S_cpdnew25_c0' : 'rxnnew71_c0',   # Menaquinol-9(4H)
     'S_cpdnew20_c0': 'rxnnew64_c0',     # Polysacaride
	 'S_cpdnew21_c0': 'rxnnew65_c0',     # Lipomannan
     'S_cpdnew19_c0': 'rxnnew63_c0',      # UDP-2,3-diacetamido-2,3-dideoxy-D-mannuronate
     'S_cpdnew10_c0': 'rxnnew54_c0',     # average fatty acyl-ACP
	 'S_cpdnew11_c0':'rxnnew55_c0'     #Avg. Phosphatidylglycerol
}
# metabolites with reactions that were dependent of the `previous metabolites to have formulas
fixDict2 = {
     'S_cpdnew27_c0':'rxnnew67_c0',     # Propionibacterium cell wall
     'S_cpdnew12_c0':'rxnnew56_c0',      #Avg, Cardiolipin
     'S_cpdnew13_c0': 'rxnnew57_c0',    # Avg. Phosphatidylinositol
     'S_cpdnew14_c0': 'rxnnew58_c0',    # Avg. Lysophosphatidylinositol
     'S_cpdnew15_c0': 'rxnnew59_c0',    # Avg. Phosphatidylethanolamine
     'S_cpdnew16_c0': 'rxnnew60_c0',     # Avg. Acylphosphatidylglycerol
     'S_cpdnew17_c0': 'rxnnew61_c0'     # Avg. Diacylinositol mannoside
}
fixDict3 = {
    'S_cpdnew27_c0':'rxnnew67_c0',     # Propionibacterium cell wall
    'S_cpdnew18_c0': 'rxnnew62_c0' # Propionibacterium lipids
}
fixDict4 = {
    'S_biomass_ext':'biomass_c0',     # Biomass
    'S_cpdnew26_c0': 'rxnnew72_c0',  # Small molecule pool
}

fixDict = {**fixDict1, **fixDict2, **fixDict3, **fixDict4}
model, estimastesFormuals = fix_missing_formulas(model= model, fixDict= fixDict, maxIterations=20)
print(estimastesFormuals)


# check in the Excel file if mass balances now comply
#print_SBML_info_2_excel(modelName=model, print2Excel= False, saveName= 'analysis_sherm_after_fix.xlsx')

# looking at oxygen balance we can still see problems for reaction rxnnew75_c0 (creating DNA)
check_reaction(model= model, reactionID= 'rxnnew75_c0')

# the charge balnce is also compleetly off lets fix this
missing_charge = check_charge(model= model, reactionID ='rxnnew75_c0')
DNAreactionID= 'rxnnew75_c0'

# fix the electron balance of the DNA reaction
# get the reaction
Rxn_DNA = model.reactions.get_by_id(DNAreactionID)
H_id_intra = 'S_cpd00067_c0' # id of intracellular H+

# define metabolite to add to balance the electrons (i.e., formation of interacellurar H+)
metabolites2add = {
    H_id_intra: 3,  # consume ATP intracelular (right side of the chemical eq)
}

# add H+ to the reaction and double-check the charge balance
Rxn_DNA.add_metabolites(metabolites2add)
check_charge(model= model, reactionID= 'rxnnew75_c0')

# check the yields, more realistic now?
exchangeRxnId_Acetate = 'Ex_S_cpd00029_ext'
exchangeRxnId_Propionate = 'Ex_S_cpd00141_ext'
exchangeRxnId_Glucose = 'Ex_S_cpd00027_ext'
exchangeRxnId_Biomass = 'Ex_S_biomass_ext'

yProp = find_yield(model= model, substrateExchangeRxnID= exchangeRxnId_Glucose, productExchangeRxnID= exchangeRxnId_Propionate)
print('The yield of propionate is: {} \n'.format(yProp))

yAce = find_yield(model= model, substrateExchangeRxnID= exchangeRxnId_Glucose, productExchangeRxnID= exchangeRxnId_Acetate)
print('The yield of acetate is: {} \n'.format(yAce))

yBm = find_yield(model= model, substrateExchangeRxnID= exchangeRxnId_Glucose, productExchangeRxnID= exchangeRxnId_Biomass)
print('The yield of biomass is: {} \n'.format(yBm))


# ----------------- split into compartments by re-moving and adding new boundry reactions
# Get the original (faulty) exchange reactions (even though there is only one compartment for the time being,
# It does a good job at guessing what they are in this case)
model._compartments = {'c': 'Cytoplasma', 'e': 'Extracellular'}
listExchRxn = model.exchanges
for original_reaction in listExchRxn:
    # Create a new exchange reaction with the same metabolites as the original reaction
    metabolite = original_reaction.reactants[0]  # there is only going to be one metabolite in the reaction reactants
    metabolite.compartment = 'e'

# save the model
if save:
    write_sbml_model(model, r"/SBML models/P_sherm_test.xml")